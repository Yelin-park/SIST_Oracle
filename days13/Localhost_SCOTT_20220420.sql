-- [ SCOTT에 접속된 스크립트 파일 ]
---- 복습문제 ----

1. book, panmai, danga, gogaek 조인하여 다음을 출력 한다.
  -- 책이름(title) 고객명(g_name) 년도(p_date) 수량(p_su) 단가(price) 금액(p_su*price)
  -- 단, 년도 내림차순 출력
 

TITLE            G_NAME               P_DATE         P_SU      PRICE         금액
---------------- -------------------- -------- ---------- ---------- ----------
운영체제         강남서점             21/11/03          5        450       2250
엑셀             서울서점             21/11/03         31        321       9951
데이터베이스     강북서점             21/11/03         26        300       7800
데이터베이스     강남서점             21/11/03         17        300       5100
엑세스           강남서점             21/11/03         21        510      10710
운영체제         우리서점             21/11/03         13        450       5850
데이터베이스     우리서점             00/10/10         10        300       3000
데이터베이스     강북서점             00/10/10         15        500       7500
워드             서울서점             00/07/07          5        320       1600
데이터베이스     도시서점             00/03/04         20        300       6000

SELECT title, g_name, p_date, p_su, price, price * p_su 금액
FROM book b JOIN panmai p ON b.b_id = p.b_id
            JOIN danga d ON b.b_id = d.b_id
            JOIN gogaek g ON p.g_id = g.g_id
ORDER BY p_date;

2. book 테이블, panmai 테이블, gogaek 테이블을 b_id 필드와 g_id 필드를 기준으로 조인하여 
다음의 필드 출력 한다. 
단, book 테이블의 모든 행은 출력 되도록 한다.(OUTER 조인)
  ( 판매가 안된 책 정보도 출력 )
 
  
책ID       제목                     G_ID G_NAME                     판매수량
---------- ------------------- ---------- -------------------- ----------
b-1        운영체제                     1 우리서점                     13
a-1        데이터베이스                 1 우리서점                     10
a-1        데이터베이스                 2 도시서점                     20
d-1        엑셀                         4 서울서점                     31
c-1        워드                         4 서울서점                      5
b-1        운영체제                     6 강남서점                      5
a-1        데이터베이스                 6 강남서점                     17
f-1        엑세스                       6 강남서점                     21
a-2        데이터베이스                 7 강북서점                     15
a-1        데이터베이스                 7 강북서점                     26
e-1        파워포인트                                                     
f-2        엑세스                                                        
b-2        운영체제                                                      



3. 년도, 월별 판매 현황 구하기

년도   월        판매금액( p_su * price )
---- -- ----------
2000 03       6000
2000 07       1600
2000 10      10500
2021 11      41661

 

4. 서점별 년도별 판매현황 구하기 

년도         서점ID 서점명                판매금액
---- ---------- -------------------- ----------
2000          7 강북서점                   7500
2000          2 도시서점                   6000
2000          4 서울서점                   1600
2000          1 우리서점                   3000
2021          6 강남서점                  18060
2021          7 강북서점                   7800
2021          4 서울서점                   9951
2021          1 우리서점                   5850

8개 행이 선택되었습니다. 
 

5. 올해 가장 판매가 많은 책(수량을 기준으로) 

책ID       제목       권수
---------- ----------------
a-1        데이터베이스  43
 
-- TOP-N 방식, RANK() 함수
 
6. 서점별 판매현황 구하기

서점코드  서점명  판매금액합  비율(소수점 둘째반올림)  
---------- -------------------------- ----------------
7	    강북서점	15300		26%
4	    서울서점	11551		19%
2	    도시서점	6000		10%
6	    강남서점	18060		30%
1	    우리서점	8850		15%


-------------------------------------------------------------------
[새로운 개념!!!]
1. 데이터베이스 모델링 (DB 모델링) 정의
    1) 데이터베이스 ? 관련된 데이터들의 집합(모임)
    2) 데이터베이스 모델링 ? 현실 세계의 업무적인 프로세스를 물리적으로 데이터베이스화 시키기 위한 과정
      예) 회사 사원 -> 정보(데이터) -> 저장(사원 관리) -> 물리적 저장(데이터베이스화)하는 과정
                                연락처, 진급, 연봉인상 등등..
                                
    (현실세계)업무 프로세스   →   *개념적 [DB] 모델링    →   개념적 구조 잡기
      *업무 요구 분석                                              ↓
         ↕                                              *논리적 [DB] 모델링
         ↕ 일치성 검토(일치 하지 않은면 사이클 다시 돔)               ↓
     실제 물리적 DB 구축   ←    *물리적 DB 모델링     ←   데이터 모델링(논리적 구조 파악)

    순서 : 요구분석 -> 개념적 DB 모델링 -> 논리적 DB 모델링 -> 물리적 DB 모델링                                         

2. 데이터베이스 모델링 단계
    1) 개념적 DB 모델링 단계
      - 요구 분석 후 Entity(개체) 추출, Attribute(속성) 추출하고 Entity 간의 관계 정의를 통해 ER Diagram 작성(구성) 단계
    
    2) 논리적 DB 모델링
      - ER Diagram을 매핑룰(mapping rule)을 통해서 RDBMS이론에 입각한 스키마를 설계(정의) + 정규화 수행 과정
    
    3) 물리적 DB 모델링
      - DBMS 선정(오라클/MySQL/MS SQL 등 무엇을 사용할지 결정)
      + 컬럼 데이터타입, 크기 + 데이터 사용량 분석을 통해 효율적인 데이터베이스가 될 수 있도록 인덱스 정의
      + 역정규화를 수행하는 단계
    
    4) 실제 데이터베이스 생성
    5) 본격적으로 어플리케이션 개발 단계 시작
    
----------------------------------------------------------------------------------------

[DB 모델링 과정]
    1) 요구분석 ***
    2) 요구 분석 명세서 작성(프로젝트)
    
    3) 개념적 DB 모델링
    4) 개념적 스키마(Entity, Attribute, 관계) 생성 - ER Daigram 작성
        + E, A, R 관계차수, 선택성, 식별장 -> ERD
    
    5) 논리적 DB 모델링
    6) 매핑룰 -> 논리적 스키마(관계형 데이터베이스 스키마)
    7) 정규화
    
    8) 물리적 DB 모델링
    9) 물리적 스키마(인덱스 정의, 역정규화, 컬럼 크기, 자료형..)
    
    10) DB 구현

---------------------------------------------------------------------------
3. 요구(업무) 분석
    1) 관련 분야에 대한 기본 지식과 상식 필요 예) 회계 프로그램(대차대조표, 자산, 손실 등..) ***
    2) 신입 사원 입장으로 업무 자체와 프로세스 파악에 초점을 두고 분석 필요
    3) 요령 - 우선, 문서(서류, 장표, 보고서)를 이용해서 데이터로 관리되어지는 항목을 정확하게 파악
           - 앱/웹의 모든 페이지를 이용해서 데이터로 관리되어지는 항목 분석 ***
    4) 담당자와 인터뷰 ***
    5) 백그라운드 프로세스 파악(하나의 업무에서 다양한 경우의 수 발생)
    6) 사용자 요구 분석

-------------------------------------------------------------------------------    
4. 개념적 DB 모델링
    1) 사용자가 필요로 하는 데이터가 무엇인지 파악 -> 어떤 데이터를 DB에 저장해야 하는지 충분히 분석
    
    2) 요구분석 -> 현실 세계의 수집된 정보들을 명확한 형태로 표현하는 단계
    
    3) ER Diagram(ERD) : 개체(E) - 관계(R) 모델
        (1) 1976년 P.chen 제안
        (2) 개체 + 관계 모델을 그래프 형식으로 알아보기 쉽게 표현한 것
             개체 - 직사각형
             속성 - 타원형
             개체들 간의 관계 - 마름모
             이들을 연결하는 링크로 구성
             
    4) ER Diagram 용어
        (1) Entity (== 개체 == 실체) : ER Diagram에서 직사각형으로 그림
          - 업무 수행을 위해 '데이터로 관리'되어져야 하는 00(사람, 사물, 장소, 사건 등등)
            (현실 세계에서 독립적으로 존재하는 고유 식별가능한 객체)
             예) 학생, 과정, 과목, 수강여부, 교수, 일시, 학과 등등
             
          - 물리적 존재 유형, 무형
          
          - 실체(Entity)는 테이블로 정의
            예) emp(사원), salgrade(급여등급), dept(부서), bonus(보너스)
            
          - 실체 파악 시 관련 업무에 대한 지식(가장 중요)
            예) 학원 DB 모델링
                학생 출결상태, 성적관리(과목), 입시 관련 상태 등등
             
        (2) Attribute(== 속성) : ER Diagram에서 타원형으로 그림
          - 실체(Entity)에 대한 저장할 필요가 있는 실체의 정보
           예) 학생(E) - 이름, 주소, 연락처, 키, 몸무게 등등
           
          - 속성은 실체의 성질, 분류, 수량, 상태, 특성, 특징 등을 나타내는 세부 항목을 의미
           예) 학생 - 주민등록번호 속성 포함 안시키면 성별, 나이, 생일 모름 -> 성별, 나이, 생일을 관리안하겠다는 뜻
           
          - 속성 설정 시 가장 중요한 부분 : 관리의 목적, 활용 방향에 따라서 속성이 나온다.
        
          - 속성은 컬럼으로 정의 된다.
          
          - 속성의 유형
           ㄱ. 기초 속성 : 원래(기본적으로) 갖고 있는 속성 ex) 학번
           ㄴ. 추출 속성 : 기초 속성을 가공처리(계산) 해서 얻을 수 있는 속성
            ex) 주민등록번호(기초속성) -> 성별, 나이, 생일 속성 추출 가능함 : 이런 것을 추출 속성
                자료의 중복성, 무결성 확보를 위해 최소화 시켜서 사용
                 -> 즉, 주민번호로 성별, 나이, 생일을 알 수 있으니 성별, 나이, 생일 컬럼을 넣지 말자
            ex) 단가 * 수량 = 판매금액
                price, p_su, total
                5000, 3, 15000
                -> 판매금액 컬럼을 따로 만들면 단가, 수량이 바뀌면 데이터를 바꿔줘야한다.
                   추출해서 가져올 수 있으니 중복성을 최소화시키기 위해 컬럼을 만들지말자
           ㄷ. 설계 속성 : 실제로는 실체가 존재하지 않으나, 시스템의 효율성을 위해서 설계자가 임의로 부여하는 속성
            ex) '주문상태' 확인 -> 주문, 결제완료, 배송완료, 배송중 - 택배사 확인하는 속성
          
          - 속성 도메인의 설정
           ㄱ. 도메인 ? 속성이 가질 수 있는 값들의 범위 == 제약조건, 특성
           ㄴ. 도메인 설정 ? 속성에 대한 세부 업무, 제약조건, 특성을 전체적으로 정의해 주는 것
              kor NUMBER(3)  0 <= n <= 100 -> CHECK
           ㄷ. 도메인 설정은 추후 개발 및 실체를 DB로 생성할 때나 프로그램 구현시 유용하게 사용된다.
           ㄹ. 도메인 정의시에는 아래와 같은 등의 사항을 파악해 주면 된다.
                속성의 이름
                자료형
                크기
                형식
                허용되는 값의 제약조건
                유일성
                유효값
                초기값
            ㅁ. 도메인 무결성 : 데이터의 입력 형식이나 입력 방법등을 정의함으로써
                             잘못된 데이터가 입력되는 경우의 수를 방지하기 위해 설정하는 것
              
        (3) Identifier(== 식별자) : ER Diagram에서 표시하는 법 = 언더라인(underline) 즉, 밑줄
            ㄱ. 식별자 ? 하나의 실체(E) 내에서 각각의 인스턴스를 유일하게 구분할 수 있는 단일 속성 또는 속성그룹
                                            행 == 레코드 == 각각의 인스턴스
              ex) 사원 실체(테이블)
                    A 사원 - empno(사원번호) 속성 -> 식별자
                    B 사원
                    :
                    
            ㄴ. 식별자가 없으면 데이터를 수정/삭제를 제대로 못한다.
              ex) 이름/부서/입사일자/직업
                  삭제시 WHERE 이름/부서/입사일자/직업 -> 이렇게 삭제하면 동일한 조건을 가진 데이터도 삭제됨
                  
            ㄷ. 식별자의 종류
             ① 후보키(Candidate Key)
                - 실체(E)에서 각각의 인스턴스를 구분(구별)할 수 있는 속성
                 ex) 사원 실체(E) - [사원번호], 사원명, [주민번호], [이메일], [연락처] 등등 -> 사원명 빼고 전부 후보키
             
             ② 기본키(Primary Key)
                - 후보키 중에 가장 적합한(대표적) 키 : 업무적 활용도 등등 파악해서 기본키 설정함
                 ex) 사원번호 7자리, 주민번호 14자리, 이메일 15자리, 연락처 15자리 중 가장 짧은 것을 선택 -> 사원번호
                     또는 활용도가 높은 것을 선택
                     
             ③ 대체키(Alternate Key)
                - 모든 후보키에서 기본키를 뺀 나머지
                 ex) 주민번호, 이메일, 연락처
                 
                - INDEX(인덱스)로 활용된다. ***
                
             ④ 복합키(Composite Key)
                - 하나의 속성으로 기본키가 될 수 없는 경우 둘 이상의 속성을 묶어서 식별자(기본키)로 정의한 경우
                
                - 복합키를 구성할 때 주의 사항
                    a. 복합키 중 어떤 속성을 먼저(앞에) 둘것인가?
                    b. 이유 ? 먼저오는 속성에 인덱스, 유일성이 적용되기 때문에 즉, 성능 고려 때문에
                
                ex) 급여지급 실체(E, 테이블)
                    급여지급일  사원번호   지급액      -> 급여지급일 + 사원번호 = 복합키 선언
                    2022/02   7369    3,500,000
                    2022/03   7369    3,500,000
                    2022/04   7369    3,500,000
                    2022/02   7370    3,500,000
                    2022/03   7370    3,500,000
                
                - 복합키 추가하는 방법
                ALTER TABLE
                ADD CONSTRAINTS PRIMARY KEY(급여지급일, 사원번호)
                
                
                주의할 점) 급여지급일 + 사원번호 속성 중에 어느 컬럼으로 조회를 많이 하나?
        
             ⑤ 대리키(Surrogate Key)
                - 복합키를 대신할 식별자
                수정/삭제/검색을 할 때 마다 급여지급일 + 사원번호 컬럼을 두개를 넣어야 하는데..
                일련번호라는 컬럼을 추가하여 PK로 설정
                
               - 일련번호라는 컬럼을 추가하여 PK로 설정하는 것을 역정규화(물리적 모델링)라고 한다.
               
               - 성능, 효율성 때문에 역정규화하는 것인 대리키를 생성한다.
                
                    급여지급일  사원번호   지급액      [일련번호]
                    2022/02   7369    3,500,000       1
                    2022/03   7369    3,500,000       2
                    2022/04   7369    3,500,000       3
                    2022/02   7370    3,500,000       4
                    2022/03   7370    3,500,000       5                  
                    
        (4) Relational(== 관계) : ER Diagram에서 마름모로 작성
            - 관계 ? 실체(E)와 실체(E)간의 업무 연관성
                ex) 사원 실체(E) - 소속 관계 -  부서 실체(E)
                    사원과 부서간의 업무 연관성은? 소속 관계
                    학생 실체(E)  - 수강 관계 -  과목 실체(E)
            
            - 관계도 속성을 가질 수 있다. -> 속성을 가질 수 있기 때문에 기본키(PK)도 가질 수 있다.
                ex) 회원 실체(E)    - <대여 관계> -   비디오테이프 실체(E)
                                    대여일자
                                    결제
                                    반납일자
                                    손실
                                    등등의 속성이 올 수 있다.
            - 관계 표현
             ① 실체 ------------(실선으로 연결)------------- 실체
             ② 관계 차수 표현
                1:1 관계
                1:N 관계
                N:M 관계
             
             ex)
                부모테이블                    자식테이블
                부서(E)   ------<소속>------  사원(E)
                 1                           N  -> 1개의 부서는 여러 명의 사원을 가질 수 있다.
                 
                 구매하는 주체
                 부모테이블                  자식테이블
                 고객(E) ------<구매>------ 상품(E)
                  1                         N
                  N                         M
                  N                         1
                  
             ③ 선택성 표시 기호
                부서가 없는 사원이 있을 수도 있고
                사원이 없는 부서가 있을 수도 있기 때문에
                표기를 01로 한다.(IE 표기법)
                 부서(E)   -10-----<소속>-----0-  사원(E)
                 1                           N  -> 1개의 부서는 여러 명의 사원을 가질 수 있다.

-------------------------------------

문제1) 다음은 현업 담담자와의 면담 자료이다. ( 요구 분석)
지금까지 알아본 개념을 바탕으로 다음에서 [실체]와 [주요 속성]을 추출해 다이어 그램을 그리시오. -> ERD 작성

나는 교육센터의 관리자이다 우리는 여러 과정을 가르치는 데, 각 과정은 코드,이름 및 수강료를 갖고 있다. 
'VB'과 'Java' 는 인기 있는 과정이다. 과정들은 1일~4일간으로 기간은 다양하다. 박찬호와 박신양은 우리의 가장 
훌륭한 강사들이다. 우리는 각 강사의 이름과 전화번호를 필요로 한다. 학생들은 시간에 따라 여러 개의 과정을 이수할 수 있는 데 
많은 학생들이 이렇게 하고 있다. 우리는 각 학생들의 이름과 전화번호를 알고 싶다.  

1. 실체(Entity) : 과정, 강사, 학생, [직원(강사가 하나의 종류로 들어가도 됨), 과목, 강사스킬, 개강과정(정규화할 때 나와짐)]
2. 속성(Attribute)
    과정 : 과정코드, 이름, 수강료, 시작일, 종료일, 교육기간, 강의장
    강사 : 이름, 연락처, 과정코드, 강사코드
    학생 : 이름, 연락처, 과정코드, 학생코드
    직원 : 직원코드번호, 이름, 연락처, 직원구분
    
    강사 -1--<강의관계>--- 과정
교육과정명 : AWS클라우드활용자바풀스택
3. 식별자(Identifier)
4. 관계(Relational)
    ㄱ. 관계차수
    ㄴ. 선택성
5. 툴 사용해서 ERD 작성

-------------------------------------------------------------------------------------------------------
 = 비디오 가게(ShOP)  DB모델링 =
 
   □ 실무자와 같이 업무적인 설명을 듣고 모델링을 시작해 보자.

      1. 회원제를 실시하는 비디오 상점.
      2. 회원 관리
         ㄱ) 회원이름, 주민번호, 전화번호, 휴대폰번호, 우편번호, 주소, 등록일 등 .
      3. 비디오 테이프 관리
         ㄱ) 장르별, 등급별로 나누어 관리.
         ㄴ) 고유한 일련번호를 부여해서 비디오 테이프를 관리. 
         ㄷ) 영화제목, 제작자, 제작 국가, 주연배우, 감독, 개봉일자, 비디오 출시일 등 상세 정보 관리.
         ㄹ) 파손 여부와 대여 여부 관리.      
      4. 비디오 테이프 대여
         ㄱ) 회수일이 기본 이틀
         ㄴ) 미납 회원들의 목록을 자동으로 관리.
         ㄷ) 연체되었을 경우에는 연체료를 받는다.
         ㄹ) 대여료 신/구 차등 관리.
      5. 포인터 관리 서비스
         ㄱ) 회원에게 대여 1회당 1점씩 포인트 점수를 부여하여 10점이 되면 무료로 TAPE 하나 대여 서비스
      6. 관리자 관리
         ㄱ) 일별 , 월별, 년별 매출액 손쉽게 파악.
         ㄴ) 비디오 테이프의 대여 회수 파악.
         ㄷ) 연체료 관리
         ㄹ) 미납 회원 관리.
         ㅂ) 직원 관리( 근무 시간, 임금 자동 계산 )
         ㅅ) 체인점을 확장해 운영하고 자 함.      

-----------------------------------------------------------------------------------------
5. 논리적 DB 모델링
    1) 부모테이블과 자식테이블
      - 기준 : 관계의 주체 여부, 당연히 관계의 주체가 부모(Parent) 테이블
      ex) 고객테이블     <주문 관계>     상품 테이블
          주문하는주체
          부모테이블
          
          사원테이블     <소속 관계>      부서테이블
                                        부서가 만들어져야 사원이 소속가능
                                        부모테이블
            > 부서가 먼저 정의가 되어야 사원에 대한 부서를 정의할 수 있으므로 부서테이블이 부모테이블이 된다.

    2) 기본키(Primary Key)와 외래키(Foreign Key)
        예) dept(deptno : PK) 부모테이블
                소속관계(deptno)
            emp(deptno : FK) 자식테이블
    
    3) *** 식별 관계와 비식별 관계 ***
      (1) 식별 관계 : 부모테이블의 PK -> 자식 테이블의 PK 또는 PK 그룹으로 전이되는 것
      (2) 비식별 관계 : 부모테이블의 PK -> 자식 테이블의 FK로 전이되는 것
    
        예) 식별관계                     비식별관계
            book(pk - b_id)             dept(pk - deptno)
            danga(pk - b_id)            emp(fk - deptno)

6. ERD -> 논리적 모델링
          매핑룰(mapping rule) -> 논리적 스키마 생성
   매핑룰(Mapping Rule) ? ERD를 이용해서 관계 스키마(테이블)를 생성하기 위해서 따르는 규칙을 매핑룰이라고 한다.
                        개념적 모델링에서 도출된 실체 타입과 관계 타입 => 테이블 정의를 의미 => 관계 스키마
                        
    1단계) Entity -> 테이블로 바뀜
    2단계) Attribute -> 컬럼으로 바뀜
    3단계) Identifier -> PK 설정
    4단계) Relational -> FK 설정
    
    <ERD> -> Mapping Rule -> 관계 Schema 생성

7. 문제점 ? ERD 관계차수 N:M(다대다) 관계
    예) 회원(고객) 테이블 + 비디오(상품) 테이블
            N               M
        데이터의 중복성 발생
        
                대여(주문)테이블
                비디오코드  고객ID    수량
                    1        A      2
                    2        A      2
                    3        A      2
                    1        B      1
                    1        A      1
                    
        해결 : 고객 N                       비디오 M
              1:N      대여(주문)테이블       1:N 테이블 도출함으로써 해결할 수 있다.
              
8. 정규화
    1) 정규화 의미 ? ERD -> 관계 스키마(테이블) 생성
        함수적 종속성 등의 종속성 이론을 이용해서..
        [잘못 설계된 관계 스키마]를 더 작은 속성의 [바람직한 스키마]로 만들어 가는 과정
        

        -- 이상 현상이 발생하면 잘못 설계된 관계 스키마
    2) 이상(Anomaly) 현상
          - 관계 모델에서는 속성 간에 존재하는 여러 종속 관계를 하나의 릴레이션(테이블)에 표현하기 때문에 이상 현상 발생
            즉, 데이터의 중복으로 인하여 관계 연산을 처리할 때 발생하는 곤란한 현상을 이상 현상이라고 한다.
          - 이상현상 종류 3가지
          (1) 삽입이상
            - 릴레이션에 새 데이터를 삽입하기 위해 원치 않는 불필요한 데이터도 함께 삽입해야 하는 문제를 삽입 이상(insertion anomaly)이라 한다.
                ex) 이벤트 참여하지않고 회원가입을 하려고하는데 회원가입이 되지 X
          (2) 수정이상
            - 릴레이션의 중복된 튜플들 중 일부만 수정하여 데이터가 불일치하게 되는 모순이 발생하는 것을 수정 이상(update anomaly)이라 한다.
                ex) 등급이 gold인지 vip인지 모름
          (3) 삭제이상
            - 릴레이션에서 튜플을 삭제하면 꼭 필요한 데이터까지 함께 삭제하여 데이터가 손실되는 연쇄 삭제 현상을 삭제 이상(delete anomaly)이라 한다.
                ex) 이벤트를 취소했는데 회원까지 탈퇴시켜버림
        
    3) 함수적 종속성
            - 어떤 릴레이션(테이블) R(dept)에서 
                X(deptno)와 Y(dname)를 각각의 R(dept)의 속성(컬럼) 집합의 부분집합이라 할 경우
                속성 X(deptno 10)의 값 각각에 대하여 시간에 관계없이 항상 속성Y(dname 부서명)의 값이 오직 하나만 연관되어 있을 때
                Y(dname)는 X(deptno)에 함수적 종속이라고 한다.
                
                기호 : X -> Y (Y 속성은 X 속성의 종속적이다)
                
            예) dept 부서테이블
                        PK
                      결정자     종속자
                컬럼 : deptno / dname / loc            -> '완전 함수적 종속'  
                컬럼 : deptno / dname / loc / 이벤트번호 -> '부분 함수적 종속' 나중에 제거해야 하는데 이것을 정규화라고 한다.
                      deptno -(종속)-> danme -(종속)-> loc 이런 식으로 종속되어져 있는 것 -> '이행 함수적 종속'
                        X       Y       --> dname 속성은 deptno 속성에 함수적 종속되어져있다.
                -> 이벤트번호빼고 dname과 loc는 deptno에 종속성이 있다. 이벤트번호는 종속성 X(부서테이블과 전혀 관련 X)
                
                사원테이블
                  PK
                사원코드 / 사원명 / 등급 / 이벤트번호 / 이벤트당첨여부
                사원명과 등급은 사원코드에 종속성이 있고, 이벤트번호와 당첨여부는 종속성이 없다.

    4) 정규화 목적
        - 데이터의 중복 제거
        - 데이터 검색, 수정, 삭제를 보다 쉽게(용이)하기 위해서
        - 삽입, 삭제, 수정할 때 이상 현상의 발생 방지
        
    5) 정규화(Normal From) 종류
        (1) 제1정규화(1NF)
            - 릴레이션에 속한 모든 속성의 도메인(컬럼 값)이 원자 값(atomic value) (= 중복이 되지 않은 값)으로만 구성되어 있으면 제1정규형에 속한다.
            - 반복되는 속성을 제거한 뒤 기본 테이블의 기본 컬럼을 추가해 새로운 테이블을 생성한다.
        (2) 제2정규화(2NF)
        (3) 제3정규화(3NF)
        (4) BCNF
        (5) 제4정규화
        (6) 제5정규화
            
